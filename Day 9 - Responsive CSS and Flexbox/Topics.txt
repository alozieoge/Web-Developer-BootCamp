Responsive CSS and Flexbox
==========================

Objectives
----------
- Flex shorthand
- Flexbox properties
  - Flex-direction
  - Flex basis, grow and shrink
  - Align-items
  - Flex-wrap
  - Align-content 
  - Align-self
  - Justify-content
- Media Queries


Introduction to CSS Flexbox
---------------------------
- Flexbox is a 1-D layout method for laying out items in rows / columns. 
- Recent addition and standard to CSS (4 years). 
- Comprises a series of properties to dynamically distribute space across elements / layout objects in a box / container on a webpage.
- Solves common layout problems in front-end web-dev. 

Flexbox Model
-------------
 _______________________________
|        |                      |
|        |                      |
|-----------Main Axis---------->|
|        |                      |
|     Cross Axis                |
|        |                      |
|________v______________________|

- By default: 
  - Main axis: From left to right. 
  - Cross axis: From top to bottom.

Flex Direction
--------------
- Determines how objects / elements flow or are arranged in a container.
- The default axes and directions can be changed using flex-direction. 
  { flex-direction: row; } // default
  { flex-direction: row-reverse; }
  { flex-direction: column; }
  { flex-direction: column-reverse; }

Justify Content
---------------
- Determines how the container elements / content are distributed across the main axis. 
- Works like left-justify, right-justify, center-justify in MS Office - Word, Excel, PowerPoint ...
  { justify-content: flex-start; } // default; elements flow from left to right if { flex-direction: row; } or from top to bottom if { flex-direction: column; }
  { justify-content: center; }     // elements are centered in the container along the main axis. 
  
- Also determines the spacing between and around elements or between elements and the container border, in the main axis.
  { justify-content: space-between; }  // assigns equal space between elements in the container along the main axis { flex-direction }. 
  { justify-content: space-around; }   // assigns equal space around elements in the container along the main axis. 
  { justofy-content: space-evenly; }   // assigns equal space between elements and between element and container border along the main axis. 
  
Flex Wrap
---------
- Determines how the elements will wrap along the main axis if they exceed the container width / height (depending on its main axis). 
- Elements will wrap to a new row if { flex-direction: row; } or to a new column if { flex-direction: column; }.
  { flex-wrap: nowrap; }  // default; will resize the elements width to fit into the container main axis dimension.
  { flex-wrap: wrap; }
  { flex-wrap: wrap-reverse; }  // reverse the direction of the wrap / wrap in the opposite direction i.e. from end to start. 


Responsive Design
=================
- Involves making a webpage respond dynamically and automatically to the device accessing it based on:
  - device type
  - screen size
  - orientation
  
- Old Method: Create different CSS stylesheets or different websites for different devices or viewports. 
- Responsive Method: Create one stylesheet that can respond to device sizes and features using media queries.

Media Queries
-------------
- Features / code in CSS stylesheet that enable us to modify element styles depending on certain parameters e.g. device type, viewport size, orientation.
- Viewport is the rectangualr area in computer graphics that is currently being viewed on a device. 
- Breakpoint is the point / condition at which a given media query is defined / activated.
  
  @media (max-width: 768px) {
    h1 {
      font-size: 4em; 
    } 
  }
  
- Media queries can be combined by chaining or stacking breakpoints.
- The sequence of CSS styling applied is important when using flexbox and media queries i.e. beware of over-riding styling.
  
