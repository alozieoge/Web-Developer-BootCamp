Responsive CSS and Flexbox
==========================

Objectives
----------
- Flex shorthand
- Flexbox properties
  - Flex-direction
  - Flex basis, grow and shrink
  - Align-items
  - Flex-wrap
  - Align-content 
  - Align-self
  - Justify-content
- Media Queries


Introduction to CSS Flexbox
---------------------------
- Flexbox is a 1-D layout method for laying out items in rows / columns. 
- Recent addition and standard to CSS (4 years). 
- Comprises a series of properties to dynamically distribute space across elements / layout objects in a box / container on a webpage.
- Solves common layout problems in front-end web-dev. 

Flexbox Model
-------------
 _______________________________
|        |                      |
|        |                      |
|-----------Main Axis---------->|
|        |                      |
|     Cross Axis                |
|        |                      |
|________v______________________|

- By default: 
  - Main axis: From left to right. 
  - Cross axis: From top to bottom.

Flex Sizing or Main Axis
==================

Flex-Direction
--------------
- Determines how objects / elements flow or are arranged in a container.
- The default axes and directions can be changed using flex-direction. 
  { flex-direction: row; } // default
  { flex-direction: row-reverse; }
  { flex-direction: column; }
  { flex-direction: column-reverse; }

Justify-Content
---------------
- Determines how the container elements / content are distributed across the main axis. 
- Works like left-justify, right-justify, center-justify in MS Office - Word, Excel, PowerPoint ...
  { justify-content: flex-start; } // default; elements flow from left to right if { flex-direction: row; } or from top to bottom if { flex-direction: column; }
  { justify-content: center; }     // elements are centered in the container along the main axis. 
  
- Also determines the spacing between and around elements or between elements and the container border, in the main axis.
  { justify-content: space-between; }  // assigns equal space between elements in the container along the main axis { flex-direction }. 
  { justify-content: space-around; }   // assigns equal space around elements in the container along the main axis. 
  { justofy-content: space-evenly; }   // assigns equal space between elements and between element and container border along the main axis. 
  
Flex-Wrap
---------
- Determines how the elements will wrap along the main axis if they exceed the container width / height (depending on its main axis). 
- Elements will wrap to a new row if { flex-direction: row; } or to a new column if { flex-direction: column; }.
  { flex-wrap: nowrap; }  // default; will resize the elements width to fit into the container main axis dimension.
  { flex-wrap: wrap; }
  { flex-wrap: wrap-reverse; }  // reverse the direction of the wrap / wrap in the opposite direction i.e. from end to start. 


Flex Sizing for Cross Axis
==========================

Align-Items
-----------
- Distributes items / elements along the cross axis. 
  { align-items: flex-start; }  // default
  { align-items: flex-start; }  // aligns the elements to the baseline of text contained in each element in the flex container.

Align-Content
-------------
- Distributes the space between / around elements along the cross axis. 
  { align-content: space-between; }
  { align-content: center; }
  
Align-Self
----------
- Distributes / specifies the position of individual elements alog the cross axis in a flex container. 
    div:nth-of-type(1) { align-self: flex-end; } // positions the 2nd <div> element at the end of the cross axis in the container.
  

Flex Sizing for Individual Elements
===================================

Flex-Basis
----------
- Determines the initial size of an element along the main axis before it is added to the flex container. 
- Overrides the width / height property depending on which is the main axis {flex-direction: row; }
  { flex-basis: 400px; }

Flex-Grow
---------
- Determines the amount of space that an element occupies when it grows in a flex container. 
- Accepts a unitless number that specifies the proportion of space taken by an element, relative to other elements that are growing. 
  { flex-grow: 1; }  // default; element takes the same space as other growing elements.
  { flex-grow: 2; } // element takes 2x as much space as all the growing elements.

Flex Shrink
-----------
- Determines the rate at which an element shrinks when there is not enough space along the main axis in the flex container. 
- Accepts a unitless number that specifies how much an element shrinks, relative to other shrinking elements. 
  { flex-shrink: 1; }  // default; element shrinks at the same rate / by the same amouint as other shrinking elements.
  { flex-shrink: 2; } // element shrinks at 2x the rate as other shrinking elements.
  { flex-shrink: 0; } // element does not shrink; remains the same size even when the page is resized.

Flex Shorthand
--------------
- Sets how a flex item / element will grow or shrink to fit the available space in the flex container. 
  { flex: 1 2 30px; } // default syntax: flex-grow | flex-shrink | flex-basis
  
