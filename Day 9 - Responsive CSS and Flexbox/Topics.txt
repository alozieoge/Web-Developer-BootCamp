Responsive CSS and Flexbox
==========================

Objectives
----------
- Flex shorthand
- Flexbox properties
  - Flex-direction
  - Flex basis, grow and shrink
  - Align-items
  - Flex-wrap
  - Align-content 
  - Align-self
  - Justify-content
- Media Queries


Introduction to CSS Flexbox
---------------------------
- Flexbox is a 1-D layout method for laying out items in rows / columns. 
- Recent addition and standard to CSS (4 years). 
- Comprises a series of properties to dynamically distribute space across elements / layout objects in a box / container on a webpage.
- Solves common layout problems in front-end web-dev. 

Flexbox Model
-------------
 _______________________________
|        |                      |
|        |                      |
|-----------Main Axis---------->|
|        |                      |
|     Cross Axis                |
|        |                      |
|________v______________________|

- By default: 
  - Main axis: From left to right. 
  - Cross axis: From top to bottom.

Flex Direction
--------------
- Determines how objects / elements flow or are arranged in a container.
- The default axes and directions can be changed using flex-direction. 
  { flex-direction: row; } // default
  { flex-direction: row-reverse; }
  { flex-direction: column; }
  { flex-direction: column-reverse; }

Justify Content
---------------
- Determines how the container elements / content are distributed across the main axis. 
- Works like left-justify, right-justify, center-justify in MS Office - Word, Excel, PowerPoint ...
  { justify-content: flex-start; } // default; elements flow from left to right if { flex-direction: row; } or from top to bottom if { flex-direction: column; }
  { justify-content: center; }     // elements are centered in the container along the main axis. 
  
- Also determines the spacing between and around elements or between elements and the container border, in the main axis.
  { justify-content: space-between; }  // assigns equal space between elements in the container along the main axis { flex-direction }. 
  { justify-content: space-around; }   // assigns equal space around elements in the container along the main axis. 
  { justofy-content: space-evenly; }   // assigns equal space between elements and between element and container border along the main axis. 
  
Flex Wrap
---------
- Determines how the elements will wrap along the main axis if they exceed the container width / height (depending on its main axis). 
- Elements will wrap to a new row if { flex-direction: row; } or to a new column if { flex-direction: column; }.
  { flex-wrap: nowrap; }  // default; will resize the elements width to fit into the container main axis dimension.
  { flex-wrap: wrap; }
  { flex-wrap: wrap-reverse; }  // reverse the direction of the wrap / wrap in the opposite direction i.e. from end to start. 

Align-Items
-----------
- Distributes items / elements along the cross axis. 
  { align-items: flex-start; }  // default
  { align-items: flex-start; }  // aligns the elements to the baseline of text contained in each element in the flex container.

Align-Content
-------------
- Distributes the space between / around elements along the cross axis. 
  { align-content: space-between; }
  { align-content: center; }
  
Align-Self
----------
- Distributes / specifies the position of individual elements alog the cross axis in a flex container. 
  
  div:nth-of-type(1) { align-self: flex-end; } // positions the 2nd <div> element at the end of the cross axis in the container.
