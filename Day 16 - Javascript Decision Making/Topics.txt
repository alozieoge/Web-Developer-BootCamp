Javascript Decision Making
==========================

Objectives
----------
1. Comparison operators
2. Running Javascript from a file
3. Conditionals: If, Else-If, Else
4. Truth-y and False-y values
5. Logical AND, OR, NOT


Decision Making with Code
-------------------------
- Having different outcomes based on certain criteria. 


Comparison Operators
--------------------
>   geater than
<   less than
>=  greater than or equal to
<=  less than or equal to
==  equality
!=  not equal
=== strict equality
!== strict non-equality

- Comparing strings actually compares their Unicode representation. 
  >> 'a' > 'b' // false
  >> 'A' > 'a' // false
  
Double Equals ==
----------------
- This checks for equality of value but not equality of type.
- It coerces both values to the same type before comparing them.
- This can lead to unexpected results
  >> 5 == 5;    // true
  >> 7 == '7';  // true
  >> true == false;  // false
  >> null == undefined;  // true
  
Triple Equals ===
-----------------
- This checks for equality of type and value.
  >> 5 === 5;  // true
  >> 2 === '2'  // false
  >> 0 === false  // false
  
- Always use triple equals (strict equality or non-equality) when comparing things in JS.


Console, Alert, Prompt
----------------------
console.log()
- prints the passed arguments to the console.
  >> console.log(1+4, "HI", false)  // 5, "HI", false
  
alert()
- opens a pop-up dialog window that alerts the user.
- usually requires user action.
  >> alert("HI THERE!");

prompt()
- opens a pop-up dialog window that requires user input.
- user input is always stored as a string.
  >> prompt("Please enter a number: ");
  
- To convert string to integers:
  >> parseInt("100") // 100
  >> parseInt("36tbhbda65")  // 36
- Only the numbers before the first non-numeric character are converted or parsed. 


Running JS Code from File
-------------------------
- JS code can be written and saved in a .js file.
- To run a JS script in HTML, specify its relative path name in a <script src="app.js"></script> tag.
- JS code / script can still print information to the console window if run from the HTML document.

- Keep all <script></script> element tags at the end of the <body>...</body> element.
  - This ensures that all elements defined in the HTML <body>...</body> are initialized before being acted upon by the JS code. 


Conditionals
------------
If statement: 
- Only runs code if given condition is true.
  >> let random = Math.random();
  >> if (random < 0.5) {
  >>    console.log("Your number is less than 0.5!");
  >>    console.log(random);
  >> }
  
Else If statement:
- If not the first thing, maybe this other thing?
- Multiple else-ifs can be linked to handle different conditions.
- An else-if statement is executed only if the preceding if or else-if statement failed.
  >> const age = 18;
  >> if (age < 5) {
  >>    console.log("You are a baby!);
  >> } else if (age < 10) {
  >>    console.log("You are a child!");
  >> } else if (age < 18) {
  >>    console.log("You are a teen!");
  >> } else if (age < 65) {
  >>    console.log("You are an adult!");
  >> }

Else statement:
- If nothiong else was true, do this ... 
- Serves as a catch-all for any other condition not covered.
  >> let random = Math.random();
  >> if (random < 0.5) {
  >>    console.log("Your number is less than 0.5!");
  >> } else {
  >>    console.log("Your number is greater than or equal to 0.5!");
  >> }
  >> console.log(random);
  

Nesting Conditionals
--------------------
- Conditional statements can be nested within other conditional statements. 
- However, this can lead to chunky code.

  >> const password = prompt("Please enter a new password");
  >> // Password must be 6+ characters
  >> // Password cannot include spaceS
  >> 
  >> if (password.length >= 6) {
  >>     if (password.indexOf(" ") === -1) {
  >>         console.log("Your password is valid!");
  >>     } else {
  >>         console.log("Password cannot contain spaces!");
  >>     }
  >> } else {
  >>     console.log("Password is too short! It must be 6+ characters.")
  >> }
 
 
Truth-y and False-y Values
-------------------------- 
- All JS values have an inherent truthyness or falsyness about them. 

False-y values:
- false
- 0
- "" (empty string)
- null
- undefined
- NaN

Truth-y values:
- Everything else including negative numbers, space ...

>> const userInput = prompt("Enter something");
>> if (userInput) {
>>    console.log("TRUTHY!");
>> } else {
>>    console.log("FALSY!");
>> }


Logical Operators
-----------------
- Logical operators allow us to combine different logical expressions / multiple pieces of logic.

3 core logical operators:
- AND &&
- OR ||
- NOT !

AND:
- Both sides must be true for the entire logic to be true. 
  >> 1 <= 4 && 'a' === 'a'; // true
  >> 'abc'.length === 3 && 1 + 1 === 4; // false

- JS won't bother checking the right-side of the AND logical expression if the left-side is false, before returning a false.

OR:
- If one side is true, the entire logic is true.
  >> 1 !== 1 || 10 === 10; // true
  >> 10/2 === 5 || null; // true
  >> 0 || undefined; // false
  
NOT:
- Returns true if the expression is false or vice-versa i.e. it negates an expression.
  >> !null; // true
  >> !(0 === 0); // false
  >> !(3 <= 4); // false


Switch Statement
----------------
- A control-flow statement that can replace multiple if-statements.

>> const day = 2;
>> switch (day) {
>>    case 1:
>>      console.log("Monday");
>>      break;
>>    case 2:
>>      console.log("Tuesday");
>>      break;
>>    case 3:
>>      ...
>>      ...
>>    default:
>>      console.log("Invalid number");
>> }
